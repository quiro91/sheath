// The Kotlin subplugin wants to know the version and group of the Kotlin compiler plugin artifact
// before it gives us a Project to retrieve the value from Gradle properties. This workaround
// generates a Kotlin file that becomes part of the source set and contains necessary values.

def generatedDirPath = 'generated/sources/build-properties/kotlin/main'

sourceSets {
  main.java.srcDirs += "$buildDir/$generatedDirPath"
}

def generateBuildProperties = project.tasks.register('generateBuildProperties') {
  def version = project.findProperty('VERSION_NAME')
  def group = project.findProperty('GROUP')

  File buildPropertiesFile =
      new File(new File(project.buildDir, generatedDirPath), 'BuildProperties.kt')

  inputs.property 'version', version
  inputs.property 'group', group

  outputs.file buildPropertiesFile

  doLast {
    buildPropertiesFile.parentFile.mkdirs()
    buildPropertiesFile.write """\
      package dev.quiro.sheath.plugin
      
      internal const val VERSION = "$version"
      internal const val GROUP = "$group"
    """.stripIndent()
  }
}

compileKotlin {
  dependsOn generateBuildProperties
}

// Add the task dependencies to enforce correct ordering when depending out outputs. Requires a
// afterEvaluate block, because sourcesJar seems to be registered in a later lifecycle.
afterEvaluate {
  tasks.named('sourcesJar').configure {
    it.dependsOn(generateBuildProperties)
  }
  tasks.named('dokkaHtml').configure {
    it.dependsOn(generateBuildProperties)
  }
}
